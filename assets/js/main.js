!function(t,e){e.urlParams("debug")&&e.debug,t(function(){function n(t){return t.length}function o(t,e){return+new Date(m,t,e)>d?+new Date(m,t,e):+new Date(m+1,t,e)}function a(t){var e,n,o=(""+t).split(""),a=!0;for(e=0,n=o.length-1;e<n;e++)a=a&&o[e]==o[e+1];if(a)return a;for(a=!0,e=0,n=o.length-1;e<n;e++)a=a&&o[e]==o[e+1]+1;if(a)return a;for(a=!0,e=0,n=o.length-1;e<n;e++)a=a&&o[e]==o[e+1]-1;if(a)return a;for(a=!0,e=1,n=o.length;e<n;e++)a=a&&0==o[e];return a}function i(e){e&&e.preventDefault(),t("#nearest").html(u[j]+""),f||D()}function r(t){j=j<u.length-1?j+1:0,i(t)}function l(t){j=j>0?j-1:u.length-1,i(t)}!function(t){t.CoolDate=function(t,e,n){this.__timestamp=t,this.__title=e,this.__type=n.toLowerCase()},t.CoolDate.prototype={constructor:CoolDate,get timestamp(){return this.__timestamp},get title(){return this.__title},toString:function(){var t=Math.ceil((this.__timestamp-p)/864e5);return[0==t?"Сегодня":[1==t?"Завтра":2==t?"Послезавтра":["Через","<b>"+t+"</b>",Slavunya.math(t).declination(["день","дня","дней"]).toLowerCase()].join(" "),"будет"].join(" "),this.__type+":",this.__title+"."].join(" ")}},t.CoolDate.__defineGetter__("MONTH",function(){return"Круглая дата"}),t.CoolDate.__defineGetter__("COUNT",function(){return"Красивое количество дней"}),t.CoolDate.__defineGetter__("IMPORTANT",function(){return"Важное событие"})}(window);var u,s,c,f=!1,h=setInterval(function(){t(".mail").toggleClass("swing")},2e3),D=function(){f=!0,clearInterval(h),t(".mail").removeClass("swing")},w=location.hash.replace("#","").split("/").filter(n),C=parseInt(w[2])||11,_=(w[1]||8)-1,m=parseInt(w[0])||2016,d=+new Date(m,_,C),p=+new Date,g=parseInt((+new Date-d)/864e5),v=[new CoolDate((+new Date(m+1,_,C)),"Год",CoolDate.MONTH),new CoolDate((+new Date(m+1,_+6,C)),"Полтора год",CoolDate.MONTH),new CoolDate(o(1,14),'Первое "14 февраля" вместе',CoolDate.IMPORTANT),new CoolDate(o(1,23),'Первое "23 февраля" вместе',CoolDate.IMPORTANT),new CoolDate(o(2,8),'Первое "8 марта" вместе',CoolDate.IMPORTANT)],T=0,j=0,O=function(){var t,e,n;return t=jQuery(".js-scroll"),e=t.find("div"),n=(e.width()-t.width())/2,t.scrollLeft(n),n}(),y=+new Date,M=function(){var t=+new Date;return y+1500<t&&(y=t,!0)};for(s=1;s<12;s++)v.push(new CoolDate((+new Date(m,_+s,C)),[s,6==s?"Полгода":e.math(s).declination(["месяц","месяца","месяцев"])].join(" "),CoolDate.MONTH));for(s=2;s<=10;s++)v.push(new CoolDate((+new Date(m+s,_,C)),[s,e.math(s).declination(["год","года","лет"])].join(" "),CoolDate.MONTH));for(s=100,c=3660;s<c;s++)a(s)&&v.push(new CoolDate(d+864e5*s,[s,e.math(s).declination(["день","дня","дней"])].join(" "),CoolDate.COUNT));v.sort(function(t,e){return t.timestamp-e.timestamp}),u=v.filter(function(t){return T<10&&Math.ceil((t.timestamp-p)/864e5)>=0&&(T++,!0)}),e.log(u),t(".title.days").text(g),t(".text .days").text(Slavunya.math(g).declination(["день","дня","дней"])),t("#nearest").html(u[j]+""),t("#nearest-wrap .js-scroll").on("click",r).on("contextmenu",l).on("scroll",function(e){var n=t(this);M()&&(n.scrollLeft()<O?l(e):r(e)),n.scrollLeft(O)}),t("body").delay(2e3).queue(function(e){t(this).addClass("ready"),e()})})}(jQuery,Slavunya),function(){var t=new ProgressBar.Path("#heart-path",{easing:"easeInOut",duration:2800});t.set(-1),t.animate(1)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
