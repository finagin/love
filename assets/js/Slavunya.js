!function(e,t,n){e.Slavunya=new function(){this.__defineGetter__("initTool",function(){function e(e,n){return t.__defineGetter__.apply(t,arguments),t}var t=this;return e}),this.__defineGetter__("regExp",function(){function e(e,r){var i,o=n;if(!e||!t[e])return o;if(r){for(i in t[e])if(o=r.match(t[e][i]))return o;return n}return t[e]}var t={phone:[/^((?:\+7|8)\s*(?:\((\d{3})\)|(\d{3})))?\s*(\d{3}[\s-]?\d{2}[\s-]?\d{2})$/]};return e}),this.__defineGetter__("getRGB",function(){function e(e){var t;return e&&isArray(e)&&3==e.length?e:(t=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(e))?[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]:(t=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(e))?[2.55*parseFloat(t[1]),2.55*parseFloat(t[2]),2.55*parseFloat(t[3])]:(t=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(e))?[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]:(t=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(e))?[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]:void 0}return e}),this.__defineGetter__("cookies",function(){function n(){r={};for(var e=t.cookie.split(";"),n=/^[\s]*([^\s]+?)$/i,i=0,o=e.length;i<o;i++){var a=e[i].split("=");2==a.length&&(r[a[0].match(n)[1]]=unescape(a[1].match(n)?a[1].match(n)[1]:""))}}function r(i,o,a,s){var f,c;if(!o)return n(),i?r[i]:r;if(f="",a){var u=new Date;u.setTime(u.getTime()+24*a*60*60*1e3),f="; expires="+u.toGMTString()}c=e.location.hostname,console.log(t.cookie),t.cookie=""+i+"="+escape(o)+f+"; path=/"+(c?"; domain=."+c:"")+(s&&"https:"==locProtocol?"; secure":""),console.log(t.cookie)}return r}),this.__defineGetter__("math",function(){return function(e){var t=this.math;return fn={in:function(t){var n;return n=Array.isArray(t)?t:Array.from(arguments),n.indexOf(e)!==-1},between:function(t,n){return t<e&&e<n},right:function(t){var n,r=Math.pow(10,t||1);return n=e/r,n-=Math.floor(n),n*=r,Math.round(n)},declination:function(e){var n=this.right(1),r=this.right(2);return 1!=n||t(r).between(10,20)?t(n).in(2,3,4)&&!t(r).between(10,20)?e[1]:e[2]:e[0]}},fn}}),this.__defineGetter__("urlParams",function(){function e(e){var t={},n=location.href;return n.slice(n.indexOf("?")+1).replace(/[?#]/,"&").split("&").forEach(function(e){e=e.split("="),t[e[0]]=e[1]||!0}),e?t[e]||null:t}return e})}}(window,document,void 0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNsYXZ1bnlhLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiU2xhdnVueWEiLCJ0aGlzIiwiX19kZWZpbmVHZXR0ZXJfXyIsImluaXRUb29sIiwibmFtZSIsImdlbmVyYXRvciIsInNlbGYiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlZ0V4cCIsInR5cGUiLCJ0ZXN0U3RyaW5nIiwicmVzdWx0IiwicmVnRXhwcyIsIm1hdGNoIiwicGhvbmUiLCJnZXRSR0IiLCJjb2xvciIsImlzQXJyYXkiLCJsZW5ndGgiLCJleGVjIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwicGFyc2VDb29raWVzIiwiY29va2llcyIsImNhIiwiY29va2llIiwic3BsaXQiLCJyZSIsImkiLCJsIiwiYyIsInVuZXNjYXBlIiwidmFsdWUiLCJkYXlzIiwic2VjdXJlIiwiZXhwaXJlcyIsImRvbWFpbiIsImRhdGUiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJ0b0dNVFN0cmluZyIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJjb25zb2xlIiwibG9nIiwiZXNjYXBlIiwibG9jUHJvdG9jb2wiLCJudW1iZXIiLCJtYXRoIiwiZm4iLCJpbiIsImFycmF5IiwiYXJyIiwiQXJyYXkiLCJmcm9tIiwiaW5kZXhPZiIsImJldHdlZW4iLCJhIiwiYiIsInJpZ2h0IiwicmVzIiwiZSIsIk1hdGgiLCJwb3ciLCJmbG9vciIsInJvdW5kIiwiZGVjbGluYXRpb24iLCJ3b3JkcyIsInVybFBhcmFtcyIsImxvYyIsImhyZWYiLCJzbGljZSIsInJlcGxhY2UiLCJmb3JFYWNoIiwiZWxlbSJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBV0EsRUFBUUMsRUFBVUMsR0FFMUJGLEVBQU9HLFNBQVcsR0FBSSxZQWtCbEJDLEtBQUtDLGlCQUFpQixXQUFZLFdBRzlCLFFBQVNDLEdBQVNDLEVBQU1DLEdBR3BCLE1BRkFDLEdBQUtKLGlCQUFpQkssTUFBTUQsRUFBTUUsV0FFM0JGLEVB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VUEsR0FDZixHQUNJQyxHQURBQyxFQUFJQyxLQUFLQyxJQUFJLEdBQUlKLEdBQVMsRUFPOUIsT0FKQUMsR0FBTWIsRUFBU2MsRUFDZkQsR0FBWUUsS0FBS0UsTUFBTUosR0FDdkJBLEdBQU9DLEVBRUFDLEtBQUtHLE1BQU1MLElBR3RCTSxZQUFlLFNBQVVDLEdBQ3JCLEdBQUlWLEdBQUkxRCxLQUFLNEQsTUFBTSxHQUNmRCxFQUFJM0QsS0FBSzRELE1BQU0sRUFFbkIsT0FBUyxJQUFMRixHQUFXVCxFQUFLVSxHQUFHRixRQUFRLEdBQUksSUFFeEJSLEVBQUtTLEdBQUdQLEdBQUcsRUFBRyxFQUFHLEtBQU9GLEVBQUtVLEdBQUdGLFFBQVEsR0FBSSxJQUM1Q1csRUFBTSxHQUVOQSxFQUFNLEdBSk5BLEVBQU0sS0FTbEJsQixNQUtmbEQsS0FBS0MsaUJBQWlCLFlBQWEsV0FVL0IsUUFBU29FLEdBQVVsRSxHQUNmLEdBQUkwRCxNQUNBUyxFQUFNNUIsU0FBUzZCLElBWW5CLE9BVkFELEdBQ0tFLE1BQU1GLEVBQUlkLFFBQVEsS0FBTyxHQUN6QmlCLFFBQVEsT0FBUSxLQUNoQi9DLE1BQU0sS0FDTmdELFFBQVEsU0FBVUMsR0FDZkEsRUFBT0EsRUFBS2pELE1BQU0sS0FFbEJtQyxFQUFJYyxFQUFLLElBQU1BLEVBQUssS0FBTSxJQUczQnhFLEVBQU8wRCxFQUFJMUQsSUFBUyxLQUFPMEQsRUFHdEMsTUFBT1EsT0FNaEJ6RSxPQUFRQyxTQUFVQyIsImZpbGUiOiJTbGF2dW55YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG4gICAgd2luZG93LlNsYXZ1bnlhID0gbmV3IGZ1bmN0aW9uIFNsYXZ1bnlhKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcml2YXRlIHZhcmlhYmxlc1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGNvb2tpZXMgPSB7fTtcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRpbmcgZXh0ZXJuYWwgdG9vbHNcbiAgICAgICAgICpcbiAgICAgICAgICogQG5hbWUgaW5pdFRvb2xcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUb29sIG5hbWVcbiAgICAgICAgICogQHBhcmFtIGdlbmVyYXRvciB7ZnVuY3Rpb259IC0gR2VuZXJhdG9yIGZ1bmN0aW9uLCBtdXN0IHJldHVybiBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyBTbGF2dW55YVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fX2RlZmluZUdldHRlcl9fKCdpbml0VG9vbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdFRvb2wobmFtZSwgZ2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fX2RlZmluZUdldHRlcl9fLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGluaXRUb29sO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIHRoaXMuX19kZWZpbmVHZXR0ZXJfXygncmVnRXhwJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgcmVnRXhwcyA9IHtcbiAgICAgICAgICAgICAgICBwaG9uZTogW1xuICAgICAgICAgICAgICAgICAgICAvXigoPzpcXCs3fDgpXFxzKig/OlxcKChcXGR7M30pXFwpfChcXGR7M30pKSk/XFxzKihcXGR7M31bXFxzLV0/XFxkezJ9W1xccy1dP1xcZHsyfSkkL1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ0V4cCh0eXBlLCB0ZXN0U3RyaW5nKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVnRXhwLCByZXN1bHQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXR5cGUgfHwgIXJlZ0V4cHNbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGlmICh0ZXN0U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocmVnRXhwIGluIHJlZ0V4cHNbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPSB0ZXN0U3RyaW5nLm1hdGNoKHJlZ0V4cHNbdHlwZV1bcmVnRXhwXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnRXhwc1t0eXBlXTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVnRXhwO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX19kZWZpbmVHZXR0ZXJfXygnZ2V0UkdCJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRSR0IoY29sb3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yICYmIGlzQXJyYXkoY29sb3IpICYmIGNvbG9yLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gL3JnYlxcKFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqLFxccyooWzAtOV17MSwzfSlcXHMqXFwpLy5leGVjKGNvbG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocmVzdWx0WzFdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHJlc3VsdFsyXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChyZXN1bHRbM10pXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9IC9yZ2JcXChcXHMqKFswLTldKyg/OlxcLlswLTldKyk/KVxcJVxccyosXFxzKihbMC05XSsoPzpcXC5bMC05XSspPylcXCVcXHMqLFxccyooWzAtOV0rKD86XFwuWzAtOV0rKT8pXFwlXFxzKlxcKS8uZXhlYyhjb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQocmVzdWx0WzFdKSAqIDIuNTUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHJlc3VsdFsyXSkgKiAyLjU1LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChyZXN1bHRbM10pICogMi41NVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPSAvIyhbYS1mQS1GMC05XXsyfSkoW2EtZkEtRjAtOV17Mn0pKFthLWZBLUYwLTldezJ9KS8uZXhlYyhjb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChyZXN1bHRbM10sIDE2KVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID0gLyMoW2EtZkEtRjAtOV0pKFthLWZBLUYwLTldKShbYS1mQS1GMC05XSkvLmV4ZWMoY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChyZXN1bHRbMV0gKyByZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KHJlc3VsdFsyXSArIHJlc3VsdFsyXSwgMTYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQocmVzdWx0WzNdICsgcmVzdWx0WzNdLCAxNilcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBnZXRSR0I7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fX2RlZmluZUdldHRlcl9fKCdjb29raWVzJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUNvb2tpZXMoKSB7XG4gICAgICAgICAgICAgICAgY29va2llcyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjYSAgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmUgID0gL15bXFxzXSooW15cXHNdKz8pJC9pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2EubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gY2FbaV0uc3BsaXQoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZXNbY1swXS5tYXRjaChyZSlbMV1dID0gdW5lc2NhcGUoY1sxXS5tYXRjaChyZSkgPyBjWzFdLm1hdGNoKHJlKVsxXSA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29va2llcyhuYW1lLCB2YWx1ZSwgZGF5cywgc2VjdXJlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZXhwaXJlcyxcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUNvb2tpZXMoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZSA/IGNvb2tpZXNbbmFtZV0gOiBjb29raWVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cGlyZXMgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChkYXlzICogMjQgKiA2MCAqIDYwICogMWUzKSk7XG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvR01UU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbWFpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5jb29raWUpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICgnJ1xuICAgICAgICAgICAgICAgICAgICArIG5hbWUgKyAnPScgKyBlc2NhcGUodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICsgZXhwaXJlc1xuICAgICAgICAgICAgICAgICAgICArICc7IHBhdGg9LycgKyAoZG9tYWluID8gJzsgZG9tYWluPS4nICsgZG9tYWluIDogJycpICsgKChzZWN1cmUgJiYgbG9jUHJvdG9jb2wgPT0gJ2h0dHBzOicpID8gJzsgc2VjdXJlJyA6ICcnKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZG9jdW1lbnQuY29va2llKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29va2llcztcblxuICAgICAgICB9KTtcblxuXG4gICAgICAgIHRoaXMuX19kZWZpbmVHZXR0ZXJfXyhcIm1hdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0aCA9IHRoaXMubWF0aDtcbiAgICAgICAgICAgICAgICBmbiAgICAgICA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpblwiOiBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IGFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnIuaW5kZXhPZihudW1iZXIpICE9PSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBcImJldHdlZW5cIjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIDwgbnVtYmVyICYmIG51bWJlciA8IGI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgXCJyaWdodFwiOiBmdW5jdGlvbiAocmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gTWF0aC5wb3coMTAsIHJpZ2h0IHx8IDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gbnVtYmVyIC8gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcyAtIE1hdGguZmxvb3IocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyAqPSBlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXMpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIFwiZGVjbGluYXRpb25cIjogZnVuY3Rpb24gKHdvcmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMucmlnaHQoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHRoaXMucmlnaHQoMik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09IDEgJiYgIW1hdGgoYikuYmV0d2VlbigxMCwgMjApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRoKGEpLmluKDIsIDMsIDQpICYmICFtYXRoKGIpLmJldHdlZW4oMTAsIDIwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3Jkc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmRzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICB0aGlzLl9fZGVmaW5lR2V0dGVyX18oJ3VybFBhcmFtcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHVybCBTZWFyY2ggYW5kIEhhc2ggcGFyYW1zXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG5hbWUgdXJsUGFyYW1zXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIFBhcmFtZXRlciBuYW1lXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xib29sZWFufG51bWJlcnxvYmplY3R9IC0gUGFyYW1ldGVyIGJ5IG5hbWUgb3Igb2JqZWN0IG9mIGFsbCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVybFBhcmFtcyhuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBsb2MgPSBsb2NhdGlvbi5ocmVmO1xuXG4gICAgICAgICAgICAgICAgbG9jXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShsb2MuaW5kZXhPZignPycpICsgMSlcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1s/I10vLCBcIiZcIilcbiAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwiJlwiKVxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNbZWxlbVswXV0gPSBlbGVtWzFdIHx8IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPyByZXNbbmFtZV0gfHwgbnVsbCA6IHJlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybFBhcmFtcztcblxuICAgICAgICB9KTtcblxuICAgIH07XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCk7XG4iXX0=
