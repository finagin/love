!function(t,e,n){t.Slavunya=new function(){this.__defineGetter__("initTool",function(){function t(t,n){return e.__defineGetter__.apply(e,arguments),e}var e=this;return t}),this.__defineGetter__("regExp",function(){function t(t,r){var i,a=n;if(!t||!e[t])return a;if(r){for(i in e[t])if(a=r.match(e[t][i]))return a;return n}return e[t]}var e={phone:[/^((?:\+7|8)\s*(?:\((\d{3})\)|(\d{3})))?\s*(\d{3}[\s-]?\d{2}[\s-]?\d{2})$/]};return t}),this.__defineGetter__("getRGB",function(){function t(t){var e;return t&&isArray(t)&&3==t.length?t:(e=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(t))?[parseInt(e[1]),parseInt(e[2]),parseInt(e[3])]:(e=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(t))?[2.55*parseFloat(e[1]),2.55*parseFloat(e[2]),2.55*parseFloat(e[3])]:(e=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(t))?[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]:(e=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(t))?[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]:void 0}return t}),this.__defineGetter__("cookies",function(){function n(){r={};for(var t=e.cookie.split(";"),n=/^[\s]*([^\s]+?)$/i,i=0,a=t.length;i<a;i++){var o=t[i].split("=");2==o.length&&(r[o[0].match(n)[1]]=unescape(o[1].match(n)?o[1].match(n)[1]:""))}}function r(i,a,o,s){var f,u,c;if(!a)return n(),i?r[i]:r;if(f="",o){var h=new Date;h.setTime(h.getTime()+24*o*60*60*1e3),f="; expires="+h.toGMTString()}u=t.location.hostname,c=t.location.protocol,e.cookie=""+i+"="+escape(a)+f+"; path=/"+(u?"; domain=."+u:"")+(s&&"https:"==c?"; secure":"")}return r}),this.__defineGetter__("math",function(){return function(t){var e=this.math;return fn={in:function(e){var n;return n=Array.isArray(e)?e:Array.from(arguments),n.indexOf(t)!==-1},between:function(e,n){return e<t&&t<n},right:function(e){var n,r=Math.pow(10,e||1);return n=t/r,n-=Math.floor(n),n*=r,Math.round(n)},declination:function(t){var n=this.right(1),r=this.right(2);return 1!=n||e(r).between(10,20)?e(n).in(2,3,4)&&!e(r).between(10,20)?t[1]:t[2]:t[0]}},fn}}),this.__defineGetter__("urlParams",function(){function t(t){var e={},n=location.href,r=n.indexOf("?")!=-1?n.indexOf("?"):n.indexOf("#")!=-1&&n.indexOf("#");return r!==!1&&n.slice(r+1).replace(/[?#]/,"&").split("&").forEach(function(t){t=t.split("="),e[t[0]]=t[1]||!0}),t?e[t]||null:e}return t})}}(window,document,void 0);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
